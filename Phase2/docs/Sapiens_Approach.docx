Sapiens â€“ Agent Design
(Group Members: Ali Zeenat, Date Shreya, Mokashi Supriya)

Description:
Using the Q-learning algorithm, which uses the Bellman equation to choose the best card while playing the game of Spades.
For our agent, we define the following:
environment: cards on the table i.e the current trick
state              : list of cards in hand
action list      : list of legal cards which can be played
action            : card played by the agent from action list

An 'action' causes a change in the agent 'environment' and 'state'.
When a card is played, it is removed from the current hand and hence state changes.
This is a model-free approach of reinforcement learning where agent updates its  q-values and selects the best card which would make him win the trick.
We are using the sorting API provided by the pydealer module, cards are sorted according to the rank of their suit and card-value.
Data Structures:
1.	Q-dictionary:
	key   : hand | action
	value : qValue calculated using the Bellman equation

2.	Q-Policy:
	key   : trick | hand
	value : action which is the card to be played

Parameters for Bellman equation:
1.	reward : calculated based on action. For each action in action list, if that action causes agent to win the trick, then reward = 50 else reward = -10

2.	learning rate(alpha): 0.01

3.	gamma               : 0.8

4.	next Q-value for Bellman equation is taken from the Q-dictionary.

Policy:
The card having maximum q-Value is selected

Reference: 
https://github.com/nihalsoans91/Multi-Agent-Alternating-Turn-Board-and-Card-Games
